rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    
    match /users/{userId} {
      // Anyone authenticated can create their own user document (signup)
      allow create: if isAuthenticated() 
        && request.auth.uid == userId
        && request.resource.data.status == 'pending'
        && request.resource.data.role != 'developer';
      
      // Anyone authenticated can read their own document
      allow get: if isAuthenticated() && request.auth.uid == userId;
      
      // Anyone authenticated can list users (we'll filter in app)
      // This is needed for developer to query pending users
      allow list: if isAuthenticated();
      
      // Users can update their own document (limited fields)
      allow update: if isAuthenticated() && request.auth.uid == userId
        && !request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['role', 'status', 'approvedBy', 'approvedAt', 'userId']);
      
      // Allow updates if user is developer (checked by role in their own doc)
      allow update: if isAuthenticated() 
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer';
      
      // Allow owner to approve/update users in their department
      // Owner can approve admins and workers in their department
      allow update: if isAuthenticated()
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner'
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.departmentId == resource.data.departmentId
        && request.resource.data.role != 'owner'  // Can't update other owners
        && request.resource.data.role != 'developer'  // Can't update developers
        && !request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['userId', 'departmentId', 'role', 'email']);
      
      // Allow admin to approve workers in their department
      // Admin can ONLY approve workers (not other admins or owners)
      allow update: if isAuthenticated()
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.departmentId == resource.data.departmentId
        && resource.data.role == 'worker'  // Can ONLY update workers
        && request.resource.data.role == 'worker'  // Can't change role
        && !request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['userId', 'departmentId', 'role', 'email']);
      
      // Allow delete if user is developer
      allow delete: if isAuthenticated()
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer';
    }
    
    // ============================================
    // DEPARTMENTS COLLECTION
    // ============================================
    
    match /departments/{departmentId} {
      // Helper: Get user data
      function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      }
      
      // ANYONE can read departments (needed for signup form to show department list)
      // This is safe because departments only contain: name, type, ownerId, counts
      // No sensitive data is exposed
      allow read: if true;
      
      // Only developer can create departments
      allow create: if isAuthenticated()
        && getUserData().role == 'developer';
      
      // Developer can update any department
      allow update: if isAuthenticated() && getUserData().role == 'developer';
      
      // Owner can update their own department (all fields)
      allow update: if isAuthenticated() 
        && getUserData().role == 'owner'
        && getUserData().departmentId == departmentId
        && resource.data.ownerId == request.auth.uid;
      
      // Admin can update department counts (adminCount, workerCount) in their department
      allow update: if isAuthenticated()
        && getUserData().role == 'admin'
        && getUserData().departmentId == departmentId
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['adminCount', 'workerCount', 'updatedAt']);
      
      // Only developer can delete
      allow delete: if isAuthenticated()
        && getUserData().role == 'developer';
    }
    
    // ============================================
    // DEPARTMENT-SPECIFIC COLLECTIONS (SUBCOLLECTIONS)
    // ============================================
    
    // Pattern: /departments/{departmentId}/workers/{workerId}
    match /departments/{departmentId}/workers/{workerId} {
      // Helper: Get user data
      function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      }
      
      // Helper: Check if user is owner of this department
      function isOwnerOfDepartment() {
        return getUserData().role == 'owner' 
          && getUserData().departmentId == departmentId;
      }
      
      // Helper: Check if user is admin of this department
      function isAdminOfDepartment() {
        return getUserData().role == 'admin' 
          && getUserData().departmentId == departmentId;
      }
      
      // Helper: Check if user is developer
      function isDeveloper() {
        return getUserData().role == 'developer';
      }
      
      // Helper: Check if user is worker in this department
      function isWorkerInDepartment() {
        return getUserData().role == 'worker' 
          && getUserData().departmentId == departmentId;
      }
      
      // READ RULES
      // Developer: Full access
      allow read: if isAuthenticated() && isDeveloper();
      
      // Owner: Can read all workers in their department
      allow read: if isAuthenticated() && isOwnerOfDepartment();
      
      // Admin: Can read workers in their department (UI filters by role)
      allow read: if isAuthenticated() && isAdminOfDepartment();
      
      // Worker: Can read all workers in their department (to see preferences)
      allow read: if isAuthenticated() && isWorkerInDepartment();
      
      // WRITE RULES
      // Developer can do anything
      allow write: if isAuthenticated() && isDeveloper();
      
      // Owner can create/update/delete workers in their department
      allow create, update, delete: if isAuthenticated() && isOwnerOfDepartment();
      
      // Admin can create worker documents (only for workers, not admins/owners) in their department
      allow create: if isAuthenticated() && isAdminOfDepartment()
        && request.resource.data.role == 'worker';
      
      // Admin can update qualifications, closing intervals, and schedule-related fields for workers
      allow update: if isAuthenticated() && isAdminOfDepartment()
        && resource.data.role == 'worker'  // Can only update workers (not admins)
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'qualifications', 
          'closingIntervals',
          'updatedAt',
          'mandatoryClosingDates',
          'optimalClosingDates',
          'lastClosingDate',
          'completedMainTasks',
          'completedSecondaryTasks',
          'statistics',
          'scheduleTaskMap',
          'מחלקה'
        ]);
        // Admins can update qualifications, closing intervals, מחלקה, and schedule-related fields
      
      // Worker can update their own preferences
      allow update: if isAuthenticated() 
        && request.auth.uid == workerId
        && getUserData().departmentId == departmentId
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['preferences', 'updatedAt']);
    }
    
    // Pattern: /departments/{departmentId}/schedules/{scheduleId}
    match /departments/{departmentId}/schedules/{scheduleId} {
      // Helper: Get user data
      function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      }
      
      // Helper: Check if user is owner of this department
      function isOwnerOfDepartment() {
        return getUserData().role == 'owner' 
          && getUserData().departmentId == departmentId;
      }
      
      // Helper: Check if user is admin of this department
      function isAdminOfDepartment() {
        return getUserData().role == 'admin' 
          && getUserData().departmentId == departmentId;
      }
      
      // Helper: Check if user is developer
      function isDeveloper() {
        return getUserData().role == 'developer';
      }
      
      // Helper: Check if user is worker in this department
      function isWorkerInDepartment() {
        return getUserData().role == 'worker' 
          && getUserData().departmentId == departmentId;
      }
      
      // READ RULES
      // Developer: Full access
      allow read: if isAuthenticated() && isDeveloper();
      
      // Owner, admin, and workers can read schedules in their department
      allow read: if isAuthenticated() && (
        isOwnerOfDepartment() 
        || isAdminOfDepartment() 
        || isWorkerInDepartment()
      );
      
      // WRITE RULES
      // Developer can do anything
      allow write: if isAuthenticated() && isDeveloper();
      
      // Owner and admin can create/update/delete schedules in their department
      allow create, update, delete: if isAuthenticated() && (
        isOwnerOfDepartment() || isAdminOfDepartment()
      );
      
      // Pattern: /departments/{departmentId}/schedules/{scheduleId}/primaryTasks/{periodId}
      match /primaryTasks/{periodId} {
        // READ RULES
        // Developer: Full access
        allow read: if isAuthenticated() && isDeveloper();
        
        // Owner, admin, and workers can read primaryTasks in their department
        allow read: if isAuthenticated() && (
          isOwnerOfDepartment() 
          || isAdminOfDepartment() 
          || isWorkerInDepartment()
        );
        
        // WRITE RULES
        // Developer can do anything
        allow write: if isAuthenticated() && isDeveloper();
        
        // Only owner and admin can create/update/delete primaryTasks
        allow create, update, delete: if isAuthenticated() && (
          isOwnerOfDepartment() || isAdminOfDepartment()
        );
      }
    }
    
    // Pattern: /departments/{departmentId}/tasks/{taskId}
    match /departments/{departmentId}/tasks/{taskId} {
      // Anyone authenticated can read
      allow read: if isAuthenticated();
      
      // Anyone authenticated can write
      allow write: if isAuthenticated();
    }
    
    // Pattern: /departments/{departmentId}/statistics/{statisticId}
    match /departments/{departmentId}/statistics/{statisticId} {
      // Anyone authenticated can read
      allow read: if isAuthenticated();
      
      // Anyone authenticated can write
      allow write: if isAuthenticated();
    }
    
    // Pattern: /departments/{departmentId}/taskDefinitions/{docId}
    match /departments/{departmentId}/taskDefinitions/{docId} {
      // Anyone authenticated can read
      allow read: if isAuthenticated();
      
      // Owner and admin can write to their department's task definitions
      allow write: if isAuthenticated();
    }
    
    // Deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}